
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract NFT_planet {
    // Contract can have an instance variables.
    struct Planet{
        string name;
        uint diametr;
        uint distanceFromTheSun;
        
    }

    Planet[] planetsArr;
    mapping (uint=>uint) planetsToOwner;
    //mapping (Planet=>uint) planetsPrice;


    modifier checkOwnerAndAccept {

        require(msg.pubkey() == tvm.pubkey(), 100);
		tvm.accept();
		_;
	}
    
    function createPlanet(string name, uint diametr, uint distanceFromTheSun) public checkOwnerAndAccept  {
         
       
        for (uint i=0; i < planetsArr.length; i++){
            require(name != planetsArr[i].name, 101);
        }
        planetsArr.push(Planet(name, diametr, distanceFromTheSun));
        uint planetID = planetsArr.length - 1;
        planetsToOwner[planetID] = msg.pubkey();
    }

    function getPlanetOwner(uint planetID) public view returns (uint){
        return planetsToOwner[planetID];

    }

    function getPlanetInfo(uint planetID) public view returns (string planetName, uint planetDiametr, uint planetDistance){
        planetName = planetsArr[planetID].name;
        planetDiametr = planetsArr[planetID].diametr;
        planetDistance = planetsArr[planetID].distanceFromTheSun;
        
    }

/*
    function setPlanetPrice(uint planetID, uint price) public{
    planetsArr[planetID].price = price;
    }
*/
/*
    function setPlanetPrice(uint planetID, uint price) public{
        planetsPrice[planetsArr[planetID]] = price;
    }
    */
/*
    function changeOwner(uint PlanetID, uint pubKeyOfNewOwner) public {
        require(planetsToOwner[planetID]==msg.pubkey(), 101);
        tvm.accept();
        planetsToOwner[PlanetID] = pubKeyOfNewOwner;
    }*/

    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();
      
    }

   
}
